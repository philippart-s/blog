name: Jekyll site CI

on:
  # Dès qu'une activité sur la PR ciblant la master est détectée on déclenche le workflow
  pull_request:
    branches: [ master ]

jobs:
  check_site:
    # Ce job a pour objectif de vérifier si un site Netlify existe avec le nom de la branche ciblée par la PR
    name: Check if the site existe
    runs-on: ubuntu-latest
    outputs:
      # Cet output du job sera utilisé par le job de création du site pour savoir si il a besoin de créer ou non le site Netlify
      httpStatus: ${{ steps.check-site.outputs.httpStatus }}
    steps:
      - id: check-site
        name: Check if the site exist
        # Récupération du code retour de la recherche d'un site Netlify avec le nom de la branche
        # export en output le code retour pour le job suivant.
        run: |
          is_created=$(curl -s -o /dev/null --head -w "%{http_code}" -I -X GET -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" https://api.netlify.com/api/v1/sites?name='${{github.head_ref}}')
          echo "::set-output name=httpStatus::$is_created"
  create_env:
    # Ce job doit créer le site si il n'existe pas
    if: ${{needs.check_site.outputs.httpStatus != 200}}
    needs: check_site
    name: Site creation on netlify
    runs-on: ubuntu-latest
    outputs:
      # Cet output servira au job de déploiement du site sur Netlify
      site-id: ${{ steps.create-site.outputs.site-id }}    
    steps:
      - id: create-site
        # Step permettant la création d'un site Netlify avec comme nom le nom de la branche ciblé pas la PR
        # Il permet aussi de récupérer le site_id pour le futur déploiement.
        name: Create Site
        run: |
          site_id=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" -d '{"name": "${{github.head_ref}}"}' https://api.netlify.com/api/v1/sites | jq --raw-output '.id')
          echo "::set-output name=site-id::$site_id"